<pre class='metadata'>
Title: __COUNTER__
H1: <code>__COUNTER__</code>
Group: WG21
Shortname: Pnnnn
Revision: 0
Status: NP
Date: 2024-08-21
Editor: Jeremy Rifkin
Abstract: `__COUNTER__` is a widely-used predefined macro provided as a language extension by all major C and C++
          implementations. This paper aims to standardize existing practices.
Markup Shorthands: markdown on
ED: https://jeremy-rifkin.github.io/proposals/drafts/counter_draft_3.html
!Source: [https://github.com/jeremy-rifkin/cpp-proposals/blob/main/src/counter.bs](https://github.com/jeremy-rifkin/cpp-proposals/blob/main/src/counter.bs)
</pre>

# Introduction

The `__COUNTER__` pre-defined macro is a language extension for C and C++ which expands to an integer literal that
starts at `0` and increments by `1` every time it expanded in a translation unit. This is a widely-used utility that
is primarily useful for generating unique identifiers with the preprocessor.

# Rationale for Standardization

`__COUNTER__` is de-facto portable today. Nearly every implementation supports it with unsurprising semantics. However,
its lack of standardization results in uncertainty about its portability and semantics. For example, libraries striving
for maximum portability must resort to detection and fallback such as this example from
[google benchmark](https://github.com/google/benchmark/blob/c19cfee61e136effb05a7fc8a037b0db3b13bd4c/include/benchmark/benchmark.h#L1531-L1538):

```cpp
// Check that __COUNTER__ is defined and that __COUNTER__ increases by 1
// every time it is expanded. X + 1 == X + 0 is used in case X is defined to be
// empty. If X is empty the expression becomes (+1 == +0).
#if defined(__COUNTER__) && (__COUNTER__ + 1 == __COUNTER__ + 0)
#define BENCHMARK_PRIVATE_UNIQUE_ID __COUNTER__
#else
#define BENCHMARK_PRIVATE_UNIQUE_ID __LINE__
#endif
```

Meanwhile other libraries and C++ developers avoid it altogether due to this uncertainty. While every compiler today
supports `__COUNTER__` it's not always enabled. For example, EDG only provides it outside of standards mode. In the
absence of cautious checking and fallback, a developer must consult numerous widely used C++ implementations to convince
themselves that `__COUNTER__` exists and does what they want.

Due to its widespread nature, it would be useful to define the semantics of `__COUNTER__` as part of the official
standard. Standardizing `__COUNTER__` makes existing use more clearly defined and portable while also providing a useful
utility as a standard language feature.

# Motivating Examples

A brief survey of some uses of `__COUNTER__` in the C and C++ community:

- Google benchmark uses `__COUNTER__` for [unique identifiers](https://github.com/google/benchmark/blob/c19cfee61e136effb05a7fc8a037b0db3b13bd4c/include/benchmark/benchmark.h#L1531-L1538), falling back to `__LINE__` if `__COUNTER__` isn't present or doesn't behave as expected
- Google Orbit uses `__COUNTER__` for [unique identifiers](https://github.com/google/orbit/blob/d863597a5c15cd0930bf9dd63b0451e2327e105e/src/ApiInterface/include/ApiInterface/Orbit.h#L411)
- LLVM uses `__COUNTER__` for [unique identifiers](https://github.com/llvm/llvm-project/blob/c557d8520413476221a4f3bf2b7b3fed17681691/compiler-rt/lib/builtins/int_util.h#L26) as well as in sanitizer code to [prevent ICF](https://github.com/llvm/llvm-project/blob/c557d8520413476221a4f3bf2b7b3fed17681691/compiler-rt/lib/sanitizer_common/sanitizer_win_dll_thunk.h#L55)
- Catch2 uses `__COUNTER__` for [unique identifiers](https://github.com/catchorg/Catch2/blob/fa306fc85eca7cc68a5362c503019fa823cbe411/src/catch2/internal/catch_unique_name.hpp#L15), falling back to `__LINE__`
- Tensorflow uses `__COUNTER__` extensively, primarily for [unique identifiers](https://github.com/tensorflow/tensorflow/blob/58ee1a52795980c22ea154395ad17e09683ebff8/tensorflow/c/tf_status_helper.h#L50)
- Chromium uses `__COUNTER__` for unique identifier generation, e.g. in [crash logging code](https://github.com/chromium/chromium/blob/d2fdda68e8c5489cd8bbd7f81b423d54ddc3f588/base/debug/crash_logging.h#L121-L180), as well as for creating <a href="https://github.com/chromium/chromium/blob/818c1de64ccf78e98cca71b793642eb4bc623f2e/sandbox/mac/sandbox_logging.cc#L21-L34">unique tags for `ABORT()`s</a>
- Folly uses `__COUNTER__` for [unique identifiers](https://github.com/facebook/folly/blob/4550c4cd46a91e7bef9d348cad91dd1b07a876c8/folly/Preprocessor.h#L82-L103), falling back to `__LINE__` if not present
- v8 uses `__COUNTER__` for [unique identifiers](https://github.com/v8/v8/blob/04c9912de3373fa4779890fa70bf5bae670c61c8/src/base/macros.h#L24)
- Metric Panda Games uses `__COUNTER__` for [lookup tables](https://www.metricpanda.com/rival-fortress-update-39-how-i-use-__counter__-to-localize-text-and-hash-strings-at-compile-time/) as part of a localization and compile-time string hashing system.

# Implementation Support

`__COUNTER__` has long been supported by all major implementations of C and C++:

<style>
table, th, td {
    border: none;
}
th, td {
    padding: 5px 10px;
}
th {
    vertical-align: middle;
}
thead {
    border-bottom: 2px solid black;
}
tbody tr:nth-child(even) {
    background: #eee;
}
@media (prefers-color-scheme: dark) {
    thead {
        border-bottom: 2px solid white;
    }
    tbody tr:nth-child(even) {
        background: #111;
    }
}
</style>

<table>
    <thead>
        <tr>
            <th>Compiler</th>
            <th>Earliest Version Tested</th>
            <th>Earliest Version Tested<br/>Supporting `__COUNTER__`</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>GCC</td>
            <td>3.4.6 ‚ùå</td>
            <td>4.4.7 ‚úîÔ∏è</td>
        </tr>
        <tr>
            <td>Clang</td>
            <td>3.0.0 ‚úîÔ∏è</td>
            <td>3.0.0 ‚úîÔ∏è</td>
        </tr>
        <tr>
            <td>MSVC</td>
            <td>19.0 ‚úîÔ∏è</td>
            <td>19.0 ‚úîÔ∏è</td>
        </tr>
        <tr>
            <td>ICC</td>
            <td>13.0.1 ‚úîÔ∏è</td>
            <td>13.0.1 ‚úîÔ∏è</td>
        </tr>
        <tr>
            <td>ICX</td>
            <td>2021.1.2 ‚úîÔ∏è</td>
            <td>2021.1.2 ‚úîÔ∏è</td>
        </tr>
        <tr>
            <td>EDG</td>
            <td>6.5 üü°</td>
            <td>6.5 üü°</td>
        </tr>
        <tr>
            <td>TCC</td>
            <td>0.9.27 ‚úîÔ∏è</td>
            <td>0.9.27 ‚úîÔ∏è</td>
        </tr>
        <tr>
            <td>Movfuscator</td>
            <td>Trunk ‚úîÔ∏è</td>
            <td>Trunk ‚úîÔ∏è</td>
        </tr>
    </tbody>
</table>

üü°: Supported only outside standards mode, requiring either microsoft, GCC, or Clang emulation mode to be enabled
(controlled with `--microsoft`, `--g++`, and `--clang` respectively).

Comparison: [https://godbolt.org/z/fqTs9sWx6](https://godbolt.org/z/fqTs9sWx6)

# Design Considerations

## Precompiled Headers

MSVC and GCC save the state of `__COUNTER__` in precompiled headers. GCC notes that the `__COUNTER__` macro must not be
expanded prior to inclusion of a pre-compiled header. If it is, then the precompiled header is not used.

This paper proposes no change to the current behavior.

## Modules

GCC and MSVC do not propagate `__COUNTER__` across modules, including for header units. The following compiles with a
linker error due to multiple definitions of `x0`:

```cpp
// header.hpp
#define CONCAT_IMPL(x, y) x##y
#define CONCAT(x, y) CONCAT_IMPL(x, y)
#define NEW_VAR(name) CONCAT(name, __COUNTER__)
int NEW_VAR(x); // x0
int NEW_VAR(x); // x1

// main.cpp
import "header.hpp"
int NEW_VAR(x); // x0
```

There are similar concerns with `__TIME__` and `__DATE__` macros surrounding header units, though the potential for
problems is less pronounced. One option would to disallow the expansion of `__COUNTER__` in header units, however, no
such restriction is proposed in this paper.

This paper proposes no change to the current behavior. Other behaviors would introduce additional complexity without
clear benefit.

## ODR

It's possible to inadvertently violate ODR with `__COUNTER__`:

```cpp
// foo.hpp
#define CONCAT_IMPL(x, y) x##y
#define CONCAT(x, y) CONCAT_IMPL(x, y)
#define NEW_VAR(name) CONCAT(name, __COUNTER__)
inline void foo() {
    int NEW_VAR(x) = 2;
}

// a.cpp
#include "foo.hpp"

// b.cpp
int x = __COUNTER__;
#include "foo.hpp"
```

Current implementations do not make any special attempt to diagnose or prevent such use of `__COUNTER__` beyond existing
ODR diagnostics. Similar ODR issues can occur as a result of `__DATE__` and `__TIME__`. While existing practice is that
these ODR issues exist, it is worthwhile looking at possible solutions to the problem.

### Possible Solutions

This is a difficult problem to solve due to the nature of `__COUNTER__` and how the preprocessor interacts with the rest
of the language. Possible solutions include:

- Just don't use `__COUNTER__` in `inline` functions in headers
- Provide a mechanism to reset the `__COUNTER__`, or even push and pop the counter
- Allow for multiple counters `__COUNTER__`, possibly tied to `__FILE__`
- Change ODR to allow `inline void foo() { int x0; }` and `inline void foo() { int x1; }` to not be ill-formed
- Some sort of deterministic `__UUID__` or `__UNIQUE__` macro that is tied to the file and line

Most of these would not be practical, would add boilerplate, or would introduce substantial complexity.

### Proposed Solution

This paper proposes no fundamental changes to existing `__COUNTER__` functionality or language semantics. Instead,
unique identifiers for variables in header-`inline` functions should be solved by:

1. Modules, where `__COUNTER__` is module-local
2. The `_` placeholder [[P2169]], which is ODR-friendly

This proposal does not preclude additional functionality or other approaches to make `__COUNTER__` more ODR-friendly at
a later time.

#### Is `__COUNTER__` still needed?

`_` is largely sufficient for uses of `__COUNTER__` in the case of local identifiers, however, it does not cover
use-cases of `__COUNTER__` in namespace-scoped identifiers.

As an example of use of `__COUNTER__` outside local functions, google benchmark uses uniquely-named identifiers at
namespace-scope to register benchmark functions:

```cpp
// after preprocessor expansion:
static ::benchmark::internal::Benchmark* _benchmark_2FooBar __attribute__((unused)) =
    (
        ::benchmark::internal::RegisterBenchmarkInternal(
            new ::benchmark::internal::FunctionBenchmark("FooBar", FooBar)
        )
    );
```

An alternative to `__COUNTER__` in cases such as this would be to standardize `__attribute__((constructor))`. Google
benchmark does not rely on `_benchmark_2FooBar` to manage any objects, it is a pure constructor, however, in cases where
an object is managed and possibly needs to be destructed at the end of a program the approach of a namespace-scoped
variable has the benefit of consolidating constructor and destructor logic around an object, as opposed to managing an
object between free functions and a variable, e.g.:

```cpp
std::optional<Foo> obj;
__attribute__((constructor)) void obj_setup() {
    obj = setup_foo();
}
/* possibly a destructor too */
// vs
Foo obj = setup_foo();
/* or some raii-wrapper around Foo if additional destruction logic is needed beyond normal */
```

While `_` does cover much of the use of `__COUNTER__`, it is still useful for standardization due to existing widespread
use, unique identifiers outside inline functions, and other uses of `__COUNTER__` beyond unique identifiers.

## Range and Overflow

`__COUNTER__` is implemented with an `unsigned` counter in GCC and Clang and both implementations wrap around to zero
when that counter overflows. This paper recommends `__COUNTER__` shall be able to attain a value of at
least <nobr>2<sup>32</sup> - 1</nobr> with an error on overflow.

# Proposed Wording

Proposed wording relative to [[!N4950]]:

Insert a bullet point in <a href="https://timsong-cpp.github.io/cppwp/n4950/cpp.predefined#1">[cpp.predefined/1]</a> before bullet 3:

<blockquote>
    <ul>
        <li>
            <ins>
                `__COUNTER__`<br/>
                A *decimal literal* consisting only of *digit*s representing the value of a preprocessor-internal
                counter. The value of the counter starts at `0` and is incremented by `1` each time the `__COUNTER__`
                macro is expanded. The counter shall have a maximum value of at least
                <nobr>2<sup>32</sup> - 1</nobr></nobr>. If the value of the counter exceeds its implementation-defined
                maximum value the program is ill-formed.
            </ins>
        </li>
    </ul>
</blockquote>

Update <a href="https://timsong-cpp.github.io/cppwp/n4950/cpp.predefined#3">[cpp.predefined/3]</a>:

<blockquote>
    The values of the predefined macros (except for `__FILE__`<del> and</del><ins>,</ins> `__LINE__`<ins>, and
    `__COUNTER__`</ins>) remain constant throughout the translation unit.
</blockquote>

<pre class="biblio">
{
    "P2169": {
        "title": "A nice placeholder with no name",
        "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2169r4.pdf"
    }
}
</pre>
